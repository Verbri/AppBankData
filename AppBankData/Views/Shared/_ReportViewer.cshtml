@using AppBankData.Views.Reports
@using Telerik.Reporting
@using Telerik.ReportViewer.Mvc
@{
    Layout = null;
}
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Telerik MVC HTML5 Report Viewer</title>

    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />

    <style>

        div#reportViewer1 {
            position: relative;
            width: 85%;
            height: 520px;
            font-family: Verdana, Arial;
            font-size: 10px !important;
            margin-left:35px;
            border:0px;
           
        }
        .trv-report-viewer {
            font-size: 14px;
        }
        .trv-notifications-area {
            display: none !important;
        }
        /*#reportViewer1 .k-reset{
            font-size:80%;*/ /*memperkecil ukuran button dan toolbar*/
           
        /*}*/
         
    </style>

</head>
<body>

    @(Html.TelerikReporting().ReportViewer()
        // Each report viewer must have an id - it will be used by the initialization script
        // to find the element and initialize the report viewer.
        .Id("reportViewer1")
        // The URL of the service which will serve reports.
        // The URL corresponds to the name of the controller class (ReportsController).
        // For more information on how to configure the service please check http://www.telerik.com/help/reporting/telerik-reporting-rest-conception.html.
        .ServiceUrl(Url.Content("~/api/reports"))
        // The URL for the report viewer template. The template can be edited -
        // new functionalities can be added and unneeded ones can be removed.
        // For more information please check http://www.telerik.com/help/reporting/html5-report-viewer-templates.html.
        // .TemplateUrl(Url.Content("~/ReportViewer/templates/telerikReportViewerTemplate-17.0.23.118.html"))
        // Strongly typed ReportSource - TypeReportSource or UriReportSource.
        .ReportSource((UriReportSource)ViewBag.ReportSource)
        // Mengirimkan parameter ID ke laporan
        // Specifies whether the viewer is in interactive or print preview mode.
        // PrintPreview - Displays the paginated report as if it is printed on paper. Interactivity is not enabled.
        // Interactive - Displays the report in its original width and height with no paging. Additionally interactivity is enabled.
        .ViewMode(ViewMode.Interactive)
        // Sets the scale mode of the viewer.
        // Three modes exist currently:
        // FitPage - The whole report will fit on the page (will zoom in or out), regardless of its width and height.
        // FitPageWidth - The report will be zoomed in or out so that the width of the screen and the width of the report match.
        // Specific - Uses the scale to zoom in and out the report.
        .ScaleMode(ScaleMode.FitPageWidth)
        // Zoom in and out the report using the scale
        // 1.0 is equal to 100%, i.e. the original size of the report
        .Scale(1.0)
        // Sets whether the viewer’s client session to be persisted between the page’s refreshes(ex. postback).
        // The session is stored in the browser’s sessionStorage and is available for the duration of the page session.
        .PersistSession(false)
        // Sets the print mode of the viewer.
        .PrintMode(PrintMode.AutoSelect)
        //If set to true shows the Send Mail Message toolbar button
        .SendEmail(new SendEmail { Enabled = false })
        //Switches accessibility mode ON or OFF.
        .EnableAccessibility(false)
        .TemplateUrl(Url.Content("~/Content/ReportViewer/templates/MyTemplate.html"))
)

</body>
</html>
